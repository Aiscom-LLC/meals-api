definitions:
  AddAddressRequest:
    properties:
      city:
        type: string
      floor:
        type: integer
      house:
        type: string
      street:
        type: string
    required:
    - city
    - floor
    - house
    - street
    type: object
  AddCategoryRequest:
    properties:
      date:
        example: "2020-06-29T00:00:00Z"
        type: string
      name:
        example: закуски
        type: string
    required:
    - name
    type: object
  AddDishRequest:
    properties:
      categoryId:
        type: string
      desc:
        example: Очень вкусный
        type: string
      name:
        example: грибной суп
        type: string
      price:
        example: 120
        type: number
      weight:
        example: 250
        type: number
    required:
    - categoryId
    - name
    - price
    - weight
    type: object
  AddMealRequest:
    properties:
      date:
        example: "2020-06-20T00:00:00Z"
        type: string
      dishes:
        items:
          type: string
        type: array
    required:
    - date
    - dishes
    type: object
  AddNameRequest:
    properties:
      name:
        example: aisnovations
        type: string
    required:
    - name
    type: object
  AddressResponse:
    properties:
      city:
        type: string
      floor:
        type: integer
      house:
        type: string
      id:
        type: string
      street:
        type: string
    required:
    - city
    - floor
    - house
    - street
    type: object
  CategoryResponse:
    properties:
      clientId:
        type: string
      date:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  CateringSchedule:
    properties:
      day:
        type: integer
      end:
        type: string
      id:
        type: string
      isWorking:
        type: boolean
      start:
        type: string
    type: object
  CateringsResponse:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  ClientsResponse:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  DishRequest:
    properties:
      categoryId:
        type: string
      desc:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/Image'
        type: array
      name:
        type: string
      price:
        type: number
      weight:
        type: number
    required:
    - name
    - price
    - weight
    type: object
  ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  GetCateringsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/CateringsResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  GetClientSchedulesResponse:
    properties:
      cateringEnd:
        type: string
      cateringStart:
        type: string
      day:
        type: integer
      end:
        type: string
      id:
        type: string
      isWorking:
        type: boolean
      start:
        type: string
    type: object
  GetClients:
    properties:
      items:
        items:
          $ref: '#/definitions/response.Client'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  GetImagesResponse:
    properties:
      category:
        type: string
      id:
        type: string
      path:
        type: string
    type: object
  GetMealsResponse:
    properties:
      date:
        type: string
      dishes:
        items:
          $ref: '#/definitions/DishRequest'
        type: array
      mealId:
        type: string
      person:
        type: string
      version:
        type: string
    type: object
  Image:
    properties:
      id:
        type: string
      path:
        type: string
    type: object
  ImageResponse:
    properties:
      id:
        type: string
      path:
        type: string
    required:
    - path
    type: object
  LoginRequest:
    properties:
      email:
        example: admin@meals.com
        type: string
      password:
        example: Password12!
        type: string
    required:
    - email
    - password
    type: object
  UpdateAutoApprove:
    properties:
      status:
        example: true
        type: boolean
    required:
    - status
    type: object
  UpdateCategoryRequest:
    properties:
      name:
        example: веган
        type: string
    required:
    - name
    type: object
  UpdateClientRequest:
    properties:
      cateringId:
        type: string
      name:
        example: aisnovations
        type: string
    required:
    - name
    type: object
  UpdateScheduleRequest:
    properties:
      end:
        type: string
      isWorking:
        type: boolean
      start:
        type: string
    type: object
  request.CateringUser:
    properties:
      email:
        example: d.novikov@wellyes.ru
        type: string
      firstName:
        example: Dmitry
        type: string
      lastName:
        example: Novikov
        type: string
    type: object
  request.CateringUserUpdate:
    properties:
      email:
        example: d.novikov@wellyes.ru
        type: string
      firstName:
        example: Dmitry
        type: string
      lastName:
        example: Novikov
        type: string
    type: object
  request.ClientUser:
    properties:
      email:
        example: d.novikov@wellyes.ru
        type: string
      firstName:
        example: Dmitry
        type: string
      floor:
        example: 5
        type: integer
      lastName:
        example: Novikov
        type: string
      role:
        example: User
        type: string
    type: object
  request.ClientUserUpdate:
    properties:
      email:
        example: d.novikov@wellyes.ru
        type: string
      firstName:
        example: Dmitry
        type: string
      floor:
        example: 5
        type: integer
      lastName:
        example: Novikov
        type: string
      role:
        example: User
        type: string
    type: object
  request.Order:
    properties:
      amount:
        type: integer
      dishId:
        type: string
    type: object
  request.OrderRequest:
    properties:
      comment:
        type: string
      items:
        items:
          $ref: '#/definitions/request.Order'
        type: array
    required:
    - items
    type: object
  response.CateringClientSwagger:
    properties:
      client:
        $ref: '#/definitions/response.ClientInfo'
        type: object
      ordersDishes:
        type: string
      total:
        type: integer
    type: object
  response.Client:
    properties:
      autoApproveOrders:
        type: boolean
      cateringId:
        type: string
      cateringName:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  response.ClientInfo:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response.GetCateringClientsSwagger:
    properties:
      items:
        items:
          $ref: '#/definitions/response.CateringClientSwagger'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  response.ItemsSummaryOrder:
    properties:
      amount:
        type: integer
      name:
        type: string
    type: object
  response.OrderItem:
    properties:
      amount:
        type: integer
      id:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  response.OrderStatus:
    properties:
      status:
        type: string
    type: object
  response.SummaryOrder:
    properties:
      categoryId:
        type: string
      categoryName:
        type: string
      items:
        items:
          $ref: '#/definitions/response.ItemsSummaryOrder'
        type: array
    type: object
  response.SummaryOrdersResponse:
    properties:
      status:
        type: string
      summary:
        $ref: '#/definitions/response.SummaryOrder'
        type: object
      summaryTotal:
        type: integer
      userOrders:
        $ref: '#/definitions/response.SummaryUserOrder'
        type: object
    type: object
  response.SummaryUserOrder:
    properties:
      comment:
        type: string
      floor:
        type: integer
      items:
        items:
          $ref: '#/definitions/response.ItemsSummaryOrder'
        type: array
      name:
        type: string
      total:
        type: integer
    type: object
  response.UserOrder:
    properties:
      items:
        items:
          $ref: '#/definitions/response.OrderItem'
        type: array
      orderId:
        type: string
      status:
        type: string
      total:
        type: integer
    type: object
  response.UserResponse:
    properties:
      cateringId:
        type: string
      clientId:
        type: string
      companyType:
        type: string
      email:
        type: string
      firstName:
        type: string
      floor:
        type: integer
      id:
        type: string
      lastName:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  license: {}
  title: AIS Catering
  version: 1.0.0
paths:
  /caterings:
    get:
      parameters:
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of caterings
          schema:
            $ref: '#/definitions/GetCateringsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of caterings
      tags:
      - catering
    post:
      consumes:
      - application/json
      parameters:
      - description: Catering Name
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddNameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: catering object
          schema:
            $ref: '#/definitions/CateringsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 201 status code if success
      tags:
      - catering
  /caterings/{id}:
    delete:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - catering
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: catering model
          schema:
            $ref: '#/definitions/CateringsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns info about catering
      tags:
      - catering
    put:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Catering Name
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddNameRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - catering
  /caterings/{id}/clients:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of clients
          schema:
            $ref: '#/definitions/GetClients'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of clients
      tags:
      - clients
    post:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Client Name
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddNameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: client object
          schema:
            $ref: '#/definitions/ClientsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 201 status code if success
      tags:
      - caterings clients
  /caterings/{id}/clients-orders:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of clients orders
          schema:
            $ref: '#/definitions/response.GetCateringClientsSwagger'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of clients orders
      tags:
      - caterings clients
  /caterings/{id}/clients/{clientId}/categories:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Client ID
        in: path
        name: clientId
        type: string
      - description: in format YYYY-MM-DDT00:00:00Z
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: array of category readings
          schema:
            items:
              $ref: '#/definitions/CategoryResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of categories
      tags:
      - catering categories
    post:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: string
      - description: Category Name
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: category object
          schema:
            $ref: '#/definitions/CategoryResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error if exists and 200 if success
      tags:
      - catering categories
  /caterings/{id}/clients/{clientId}/categories/{categoryID}:
    delete:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientId
        type: string
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - catering categories
    put:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: string
      - description: new category name
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - catering categories
  /caterings/{id}/clients/{clientId}/meals:
    get:
      parameters:
      - description: Meal Date in 2020-01-01T00:00:00Z format
        in: query
        name: date
        type: string
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Client ID
        in: path
        name: clientId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: dishes for passed day
          schema:
            items:
              $ref: '#/definitions/GetMealsResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of categories with dishes for passed meal ID
      tags:
      - catering meals
    post:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Client ID
        in: path
        name: clientId
        type: string
      - description: meal reading
        in: body
        name: payload
        schema:
          $ref: '#/definitions/AddMealRequest'
      produces:
      - application/json
      responses:
        "201":
          description: created meal
          schema:
            $ref: '#/definitions/AddMealRequest'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Creates meal for certain client
      tags:
      - catering meals
  /caterings/{id}/clients/{clientId}/orders:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders for clients
          schema:
            $ref: '#/definitions/response.SummaryOrdersResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: returns orders of provided client
      tags:
      - caterings orders
  /caterings/{id}/dishes:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Category ID
        in: query
        name: categoryID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of dishes
          schema:
            items:
              $ref: '#/definitions/DishRequest'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of dishes
      tags:
      - catering dishes
    post:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: dish object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/AddDishRequest'
      produces:
      - application/json
      responses:
        "200":
          description: dish object
          schema:
            $ref: '#/definitions/DishRequest'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add dish for certain category
      tags:
      - catering dishes
  /caterings/{id}/dishes/{dishId}:
    delete:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - catering dishes
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of dishes
          schema:
            items:
              $ref: '#/definitions/DishRequest'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns dishes
      tags:
      - catering dishes
    put:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      - description: Dish object
        in: body
        name: body
        schema:
          $ref: '#/definitions/AddDishRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - catering dishes
  /caterings/{id}/dishes/{dishId}/images:
    post:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Dish ID
        in: query
        name: dishId
        type: string
      - description: Image File
        in: formData
        name: image
        type: file
      - description: id of default image
        in: formData
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: default image
          schema:
            $ref: '#/definitions/ImageResponse'
        "201":
          description: Image model
          schema:
            $ref: '#/definitions/ImageResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add image for certain dish
      tags:
      - catering dishes
  /caterings/{id}/dishes/{dishId}/images/{imageId}:
    delete:
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - catering dishes
    put:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Image ID
        in: path
        name: imageId
        type: string
      - description: Dish ID
        in: path
        name: dishId
        type: string
      - description: Image File
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: default image
          schema:
            $ref: '#/definitions/ImageResponse'
        "201":
          description: Image model
          schema:
            $ref: '#/definitions/ImageResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates image for certain dish
      tags:
      - catering dishes
  /caterings/{id}/schedules:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            items:
              $ref: '#/definitions/CateringSchedule'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of schedules
      tags:
      - caterings schedules
  /caterings/{id}/schedules/{scheduleId}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        required: true
        type: string
      - description: CateringSchedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      - description: CateringSchedule model
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: CateringSchedule model
          schema:
            $ref: '#/definitions/CateringSchedule'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 200 and updated model if success and 4xx error if failed
      tags:
      - caterings schedules
  /caterings/{id}/users:
    get:
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      - description: used query search
        in: query
        name: q
        type: string
      - description: used for role sort
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Catering user
          schema:
            items:
              $ref: '#/definitions/response.UserResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of catering users
      tags:
      - caterings users
    post:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: Catering user
        in: body
        name: body
        schema:
          $ref: '#/definitions/request.CateringUser'
      produces:
      - application/json
      responses:
        "201":
          description: Catering user
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 201 status code if success
      tags:
      - caterings users
  /caterings/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: User ID
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 204 status code if success
      tags:
      - caterings users
    put:
      consumes:
      - application/json
      parameters:
      - description: Catering ID
        in: path
        name: id
        type: string
      - description: User ID
        in: path
        name: userId
        type: string
      - description: Catering user
        in: body
        name: body
        schema:
          $ref: '#/definitions/request.CateringUserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Catering user
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 200 status code if success
      tags:
      - caterings users
  /clients:
    get:
      parameters:
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of clients
          schema:
            $ref: '#/definitions/GetClients'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of clients
      tags:
      - clients
  /clients/{id}:
    delete:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - clients
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: client model
          schema:
            $ref: '#/definitions/ClientsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns info about client
      tags:
      - clients
    put:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: update client model
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateClientRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - clients
  /clients/{id}/addresses:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: array of address readings
          schema:
            items:
              $ref: '#/definitions/AddressResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of addresses
      tags:
      - clients addresses
    post:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: address object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/AddAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: address object
          schema:
            $ref: '#/definitions/AddressResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add address for certain client
      tags:
      - clients addresses
  /clients/{id}/addresses/{addressId}:
    delete:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Soft delete
      tags:
      - clients addresses
    put:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Address ID
        in: path
        name: addressId
        required: true
        type: string
      - description: address object
        in: body
        name: payload
        schema:
          $ref: '#/definitions/AddAddressRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - clients addresses
  /clients/{id}/auto-approve:
    put:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: update auto approve
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateAutoApprove'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 204 if success and 4xx error if failed
      tags:
      - clients
  /clients/{id}/order-status:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: order status
          schema:
            $ref: '#/definitions/response.OrderStatus'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: returns status of order
      tags:
      - clients orders
  /clients/{id}/orders:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders for clients
          schema:
            $ref: '#/definitions/response.SummaryOrdersResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: returns orders of provided client
      tags:
      - clients orders
    put:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully Approved orders
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: approve user orders
      tags:
      - clients orders
  /clients/{id}/orders-file:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders for clients
          schema:
            $ref: '#/definitions/response.SummaryOrdersResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: returns excel file of orders of provided client
      tags:
      - clients orders
  /clients/{id}/schedules:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            items:
              $ref: '#/definitions/GetClientSchedulesResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of schedules
      tags:
      - clients schedules
  /clients/{id}/schedules/{scheduleId}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Client Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      - description: Client Schedule model
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Client Schedule model
          schema:
            $ref: '#/definitions/GetClientSchedulesResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns 200 and updated model if success and 4xx error if failed
      tags:
      - clients schedules
  /clients/{id}/users:
    get:
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      - description: used for pagination
        in: query
        name: limit
        type: integer
      - description: used for pagination
        in: query
        name: page
        type: integer
      - description: used query search
        in: query
        name: q
        type: string
      - description: used for role sort
        in: query
        name: role
        type: string
      - description: used for status sort
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of client users
          schema:
            items:
              $ref: '#/definitions/response.UserResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of client users
      tags:
      - clients users
    post:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      - description: Client user
        in: body
        name: body
        schema:
          $ref: '#/definitions/request.ClientUser'
      produces:
      - application/json
      responses:
        "201":
          description: Client user
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 201 status code if success
      tags:
      - clients users
  /clients/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      - description: User ID
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 204 status code if success
      tags:
      - clients users
    put:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: id
        type: string
      - description: User ID
        in: path
        name: userId
        type: string
      - description: Client user
        in: body
        name: body
        schema:
          $ref: '#/definitions/request.ClientUserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Client user
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 200 status code if success
      tags:
      - clients users
  /images:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: List of images
          schema:
            items:
              $ref: '#/definitions/GetImagesResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns list of images
      tags:
      - catering images
  /is-authenticated:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns user info if authorized
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Credentials
        in: body
        name: body
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns info about user
      tags:
      - auth
  /logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Removes cookie if set
      tags:
      - auth
  /users/{id}/orders:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Orders for user
          schema:
            items:
              $ref: '#/definitions/response.UserOrder'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: returns orders of provided user
      tags:
      - users orders
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Date query in YYYY-MM-DDT00:00:00Z format
        in: query
        name: date
        required: true
        type: string
      - description: User order
        in: body
        name: body
        schema:
          $ref: '#/definitions/request.OrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order for user
          schema:
            $ref: '#/definitions/response.UserOrder'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 201 status code if success
      tags:
      - users orders
  /users/{id}/orders/{orderId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Order ID
        in: path
        name: orderId
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully canceled
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns error or 204 status code if success
      tags:
      - users orders
swagger: "2.0"
